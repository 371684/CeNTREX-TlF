from typing import List

import numpy as np

__all__ = [
    "multipas_prism_order",
    "gaussian",
    "gaussian_amp",
    "gaussian_2d",
    "gaussian_2d_amp",
]


def multipas_prism_order(passes: int) -> List[int]:
    """
    Order of the multipass generated by two prisms.

    E.g. for 5 passes returns:
    [1,4,3,2,5]

    Args:
        passes (int): number of total passes

    Returns:
        List[int]: List with the order of the passes.
    """
    if passes % 2 == 0:
        raise ValueError("number of passes required to be odd")

    npass = [1]
    for p in range(1, passes):
        if p % 2 == 0:
            npass.append(p + 1)
        else:
            npass.append(passes - p)
    return npass


def gaussian(x: float, mean: float, sigma: float) -> float:
    """
    non-normalized gaussian function

    Args:
        x (float): x value to evaluate gaussian at
        mean (float): mean of gaussian
        sigma (float): standard deviation of gaussian

    Returns:
        float: gaussian evaluated at x
    """
    return np.exp(-((x - mean) ** 2) / (2 * sigma**2))


def gaussian_amp(x: float, a: float, mean: float, sigma: float) -> float:
    """
    Non-normalized gaussian function with amplitude a
    Args:
        x (float): x values to evaluate gaussian
        a (float): amplitude
        mean (float): mean of gaussian
        sigma (float): standard deviation of gaussian
    Returns:
        (float): gaussian evaluated at x
    """
    return a * gaussian(x, mean, sigma)


def gaussian_2d(
    x: float, y: float, mean_x: float, mean_y: float, sigma_x: float, sigma_y: float
) -> float:
    """
    Non-normalized 2D gaussian function
    Args:
        x (float): x value to evaluate gaussian at
        y (float): y value to evaluate gaussian at
        mean_x (float): mean of gaussian in x
        mean_y (float): mean of gaussian in y
        sigma_x (float): standard deviation of gaussian in x
        sigma_y (float): standard deviation of gaussian in y
    Returns:
        (float): gaussian evaluated at x and y
    """
    a = (x - mean_x) ** 2 / (2 * sigma_x**2)
    b = (y - mean_y) ** 2 / (2 * sigma_y**2)
    return np.exp(-(a + b))


def gaussian_2d_amp(
    x: float,
    y: float,
    a: float,
    mean_x: float,
    mean_y: float,
    sigma_x: float,
    sigma_y: float,
) -> float:
    """
    Non-normalized 2D gaussian function
    Args:
        x (float): x value to evaluate gaussian at
        y (float): y value to evaluate gaussian at
        a (float): amplitude
        mean_x (float): mean of gaussian in x
        mean_y (float): mean of gaussian in y
        sigma_x (float): standard deviation of gaussian in x
        sigma_y (float): standard deviation of gaussian in y
    Returns:
        (float): gaussian evaluated at x and y
    """
    return a * gaussian_2d(x, y, mean_x, mean_y, sigma_x, sigma_y)
